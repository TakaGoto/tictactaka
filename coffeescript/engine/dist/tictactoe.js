// Generated by CoffeeScript 1.9.0
(function() {
  var Board, Mark, Player, Rules, TicTacToe;

  Board = (function() {
    var DEFAULT_EMPTY_SPACE;

    DEFAULT_EMPTY_SPACE = "_";

    Board.fromString = function(boardString) {
      var board, boardSize, char, index, _i, _len, _ref;
      boardSize = Math.sqrt(boardString.length);
      board = new Board({
        size: boardSize
      });
      _ref = boardString.split("");
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        char = _ref[index];
        board.placeMark(index + 1, char);
      }
      return board;
    };

    function Board(options) {
      this.emptySpace = options.emptySpace != null ? options.emptySpace : options.emptySpace = DEFAULT_EMPTY_SPACE;
      this.marks = options.marks;
      this.slots = this.buildSlots(options.size);
    }

    Board.prototype.buildSlots = function(size) {
      var boardSize, index, slot, slots, _i, _len;
      boardSize = Math.pow(size, 2);
      slots = new Array(boardSize);
      for (index = _i = 0, _len = slots.length; _i < _len; index = ++_i) {
        slot = slots[index];
        slots[index] = this.emptySpace;
      }
      return slots;
    };

    Board.prototype.placeMark = function(position, mark) {
      return this.slots[position - 1] = mark;
    };

    Board.prototype.getSlot = function(position) {
      return this.slots[position - 1];
    };

    Board.prototype.getSlots = function(positions) {
      var marks, position, _i, _len;
      marks = [];
      for (_i = 0, _len = positions.length; _i < _len; _i++) {
        position = positions[_i];
        marks = marks.concat(this.getSlot(position));
      }
      return marks;
    };

    Board.prototype.toString = function() {
      return this.slots.join("");
    };

    Board.prototype.emptySpaces = function() {
      var count, slot, _i, _len, _ref;
      count = 0;
      _ref = this.slots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slot = _ref[_i];
        if (slot === this.emptySpace) {
          count++;
        }
      }
      return count;
    };

    Board.prototype.horizontalSlots = function() {
      return [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
    };

    Board.prototype.verticalSlots = function() {
      return [[1, 4, 7], [2, 5, 8], [3, 6, 9]];
    };

    Board.prototype.diagonalSlots = function() {
      return [[1, 5, 9], [3, 5, 7]];
    };

    return Board;

  })();

  Mark = (function() {
    function Mark(char) {
      this.char = char;
    }

    Mark.prototype.isValid = function() {
      if (!this.char || this.char.length === 0 || this.char.length > 1) {
        return false;
      } else {
        return true;
      }
    };

    return Mark;

  })();

  Player = (function() {
    var TYPES;

    TYPES = {
      "1": "human"
    };

    function Player(options) {
      this.mark = new Mark(options.mark);
      this.type = TYPES[options.type];
    }

    return Player;

  })();

  Rules = (function() {
    function Rules() {}

    Rules.isOver = function(boardString, mark) {
      var board, combinations, slots, winningCombinations, _i, _len;
      board = Board.fromString(boardString);
      winningCombinations = board.diagonalSlots().concat(board.horizontalSlots()).concat(board.verticalSlots());
      for (_i = 0, _len = winningCombinations.length; _i < _len; _i++) {
        combinations = winningCombinations[_i];
        slots = board.getSlots(combinations);
        if ((slots[0] === slots[1]) && (slots[1] === slots[2]) && slots[0] === mark) {
          return true;
        }
      }
      return false;
    };

    Rules.isTie = function(boardString) {
      var board;
      board = Board.fromString(boardString);
      return !this.isOver(boardString, "x") && !this.isOver(boardString, "o") && board.emptySpaces() === 0;
    };

    return Rules;

  })();

  TicTacToe = (function() {
    TicTacToe.play = function(setup) {
      return new TicTacToe(setup);
    };

    TicTacToe.makeMove = function(setup) {
      var game;
      game = new TicTacToe(setup);
      game.board.placeMark(setup.nextMove, game.playerOne.mark.char);
      return game;
    };

    function TicTacToe(setup) {
      this.board = Board.fromString(setup.board);
      this.board.emptySpace = setup.emptySpace;
      this.board.marks = [setup.playerOne.mark, setup.playerTwo.mark];
      this.playerOne = new Player(setup.playerOne);
      this.playerTwo = new Player(setup.playerTwo);
    }

    TicTacToe.prototype.isOver = function() {
      var mark, _i, _len, _ref;
      _ref = this.board.marks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mark = _ref[_i];
        if (Rules.isOver(this.board.toString(), mark) || Rules.isTie(this.board.toString())) {
          return true;
        }
      }
      return false;
    };

    return TicTacToe;

  })();

}).call(this);
